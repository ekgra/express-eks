name: CI/CD Pipeline for EKS Deployment

on:
  push:
    branches:
      - dev  # Trigger on pushes to the main branch

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: PROD  # Use the PROD environment for secrets and variables

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Login to Amazon ECR
      - name: Login to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_REGION.amazonaws.com

      # Step 3: Build and Push Docker Image to ECR
      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest
          docker push $AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

      # Step 4: Configure kubectl for EKS
      - name: Configure kubectl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME

      # Step 5: Deploy to EKS
      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml

      # Optional Step: Verify Deployment
      - name: Verify Deployment
        run: |
          kubectl rollout status deployment express-eks
